tibble(hla) -> tibtest
as.tibble(hla) -> tibtest
View(tibtest)
tibtest
t(tibtest)
tibtest$X <- tibtest$allele
tibtest$X <- tibtest$"allele"
colnames(tibtest)[1]
tibtest
as.tibble(hla) -> tibtest
colnames(tibtest)[1]
colnames(tibtest)[1] <- "allele"
tibtest
t(tibtest)
t(tibtest) -> transposetest
t(tibtest) -> as.data.frame(transposetest)
t(tibtest) -> data.frame(transposetest)
data.framet(tibtest)) -> transposetest
data.framet((tibtest)) -> transposetest
data.frame(t(tibtest)) -> transposetest
View(transposetest)
data.frame(t(tibtest), header = TRUE
) -> transposetest
View(transposetest)
match(hla_col, colnames(combined))
match(colnames(combined), hla_col)
match(colnames(combined), colnames(hla_col))
colnames(hla_col) %in% combined
colnames(hla_col) %in% colnames(combined)
View(transposetest)
transposetest$allele
tibtest
t(tibtest)
View(tibtest)
t(tibtest) -> transposetest
View(transposetest)
transposetest$allele
data.frame(transposetest)
data.frame(transposetest) -> transposetest
View(transposetest)
runApp('NeoAntigenPortal')
runApp('NeoAntigenPortal')
runApp('NeoAntigenPortal')
for (i in 1:ncol)){}
for (i in 1:ncol)){}
adding to table based on true column name
for (i in 1:ncol(combined_table)){
r <- match(colnames(combined_table[i]), hla_col)
combined_table["HLA_frequency", i] <- hla[, r]
}
View(hla)
combined_table["HLA_frequency", i] <- hla$`HLA Population Frequency`
match(colnames(combined), colnames(hla_col))
hla_col[1,]
row.names(hla_col)
row.names(hla)
str(hla)
data.frame(hla)
str(hla)
match(colnames(combined), colnames(hla))
match(colnames(combined), colnames(hla), nomatch = 0)
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined_table["HLA_frequency", i] <- hla[1, r]
}
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined["HLA_frequency", i] <- hla[1, r]
}
View(hla_col)
hla[1, 84]
hla[1,]
hla[-1,]
View(hla)
hla[1,2]
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined_table["HLA_frequency", i] <- hla[1, 2:r]
}
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined["HLA_frequency", i] <- hla[1, 2:r]
}
View(hla)
runApp('NeoAntigenPortal')
View(hla)
t(hla)
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined["HLA_frequency", i] <- hla[1, r]
}
runApp('NeoAntigenPortal')
read_csv("~/NeoAntigenPortal/MYCNcalc33_noparallel.csv") -> combined
for (i in 1:ncol(combined)){
r <- match(colnames(combined[i]), colnames(hla))
combined["HLA_frequency", i] <- hla[1, r]
}
hla[1, [r]]
hla[1, [2]]
hla[1[2]]
hla[[2]]
test <- match(colnames(combined), colnames(hla))
match(colnames(combined), colnames(hla))
View(hla)
match(colnames(combined), colnames(hla), nomatch = 0)
View(combined)
read.csv("~/NeoAntigenPortal/MYCNcalc33_noparallel.csv") -> combined
match(colnames(combined), colnames(hla), nomatch = 0)
match(colnames(combined), colnames(hla))
test <- match(colnames(combined), colnames(hla))
View(hla)
hla["HLA.Population.Frequency"]
hla["HLA.Population.Frequency",]
hla["HLA.Population.Frequency", 2]
runApp('NeoAntigenPortal')
runApp('shinyNAP')
runApp('shinyNAP')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textInput("inText", "Input text"),
textInput("inText2", "Input text 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
})
}
shinyApp(ui, server)
}
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
View(peptab)
runApp('shinyNAP')
View(peptab)
runApp('shinyNAP')
a <- data.frame(matrix(ncol = 1))
View(a)
for (i in 1:(nchar(as.vector(peptab$seq[j]))-8)){
a<-rbind(a,substr(peptab$seq[j], i, i+8))
}
for (j in 1:nrow(peptab)){
a <- data.frame(matrix(ncol = 1))
for (i in 1:(nchar(as.vector(peptab$seq[j]))-8)){
a<-rbind(a,substr(peptab$seq[j], i, i+8))
}
}
View(peptab)
pepseq <- (c(CLLDSSGML, YLLDSSGML))
peptab$seq <- pepseq
peptab
pepseq <- (c("CLLDSSGML", "YLLDSSGML"))
peptab$seq <- pepseq
peptab
View(peptab)
for (j in 1:nrow(peptab)){
a <- data.frame(matrix(ncol = 1))
for (i in 1:(nchar(as.vector(peptab$seq[j]))-8)){
a<-rbind(a,substr(peptab$seq[j], i, i+8))
}
}
View(a)
View(a)
for (j in 1:nrow(peptab)){
a <- data.frame(matrix(ncol = 1))
for (i in 1:(nchar(as.vector(peptab$seq[j]))-8)){
a<-rbind(a,substr(peptab$seq[j], i, i+8))
}
sink(paste(peptab$gene[j], "netmhc.txt", sep=""))
for (i in 2:nrow(a)){
cat(paste(">",peptab$gene[j], "_", i-1,sep=""))
cat("\n")
cat(a$matrix.ncol...1.[i])
cat("\n")
}
}
View(a)
for (j in 1:nrow(peptab)){
cat(paste(">", peptab$gene[j], "_", j, sep =""))
cat("\n")
cat(peptab$seq[j])
cat("\n")
sink(paste("~/shinyNAP/NeoAntigens/wt_v_mut_netmhc.txt"))
}
for (j in 1:nrow(peptab)){
cat(paste(">", peptab$gene[j], "_", j, sep =""))
cat("\n")
cat(peptab$seq[j])
cat("\n")
}
sink(paste("~/shinyNAP/NeoAntigens/wt_v_mut_netmhc.txt"))
for (j in 1:nrow(peptab)){
cat(paste(">", peptab$gene[j], "_", j, sep =""))
cat("\n")
cat(peptab$seq[j])
cat("\n")
}
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
shiny::runApp('shinyNAP')
shiny::runApp('shinyNAPaws')
runApp('shinyNAPaws')
runApp('shinyNAPaws')
runApp('shinyNAPaws')
runApp('shinyNAPaws')
shiny::runApp('shinyNAP')
runApp('shinyNAP')
shiny::runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
View(hla)
runApp('shinyNAP')
createtab(combined, ins_pep_table())
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('NeoAntigenPortal')
runApp('NeoAntigenPortal')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAPaws')
shiny::runApp('shinyNAPaws')
install.packages("stringr")
library(stringr)
runApp('shinyNAPaws')
options(rsconnect.max.bundle.size=1073741824)
options(rsconnect.max.bundle.size=1073741824)
options(rsconnect.max.bundle.size=1073741824)
options(rsconnect.max.bundle.size=1073741824)
shiny::runApp('shinyNAPaws_testpaths')
shiny::runApp('shinyNAPaws_testpaths')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
neotab %>% filter(gene == "TP53") -> tp53_subset
tp53subset[,9:26]
tp53_subset[,9:26]
View(tp53_subset)
neo_seq_df %>% filter(gene == "TP53") -> tp53_subset
tp53_subset[,9:26]
tp53_subset[,9:26] -> testcol
View(testcol)
paste(">", tp53_subset$gene[j], "_", j, "_", tp53_subset[,i],  sep ="")
paste(">", tp53_subset$gene[1], "_", j, "_", tp53_subset[,1],  sep ="")
paste(">", tp53_subset$gene[1], "_", i, "_", tp53_subset[,1],  sep ="")
paste(">", tp53_subset$gene[1], "_", 1, "_", tp53_subset[,1],  sep ="")
2+2
shiny::runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
colanmes(neo_seq_df)
colnames(neo_seq_df)
colnames(neo_seq_df)
colnames(neo_seq_df) -> new
runApp('shinyNAP_topub')
2+@
2+2
neo_seq_df %>% filter(gene = "TP53") -> testsubset
neo_seq_df %>% filter(gene == "TP53") -> testsubset
testsubset[,1]
testsubset[,9:26]
for (j in 1:nrow(testsubset)){
for (i in ncol(9:26)) {
cat(paste(">", testsubset$gene[j], "_", j, "_", testsubset[,i],  sep =""))
}
}
runApp('shinyNAP_topub')
colnames(testsubset, 19:26)
colnames(testsubset, 9:26)
colnames(testsubset)[9:26]
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
library(shiny)
ui <- fluidPage(
numericInput(inputId = "num", label = "How many inputs do you want to show?", value = 1, min = 1, max = 3),
uiOutput(outputId = "out"),
actionButton(inputId = "go", label = "Click me!") # no-button
)
server <- function(input, output){
output$out <- renderUI({
input$go # no-button
isolate( # no-button
numinputs <- lapply(seq(length.out = req(input$num)), function(i){
textInput(inputId = paste0("txt", i), label = paste0("Text input ", i))
})
) # no-button
})
}
shinyApp(ui = ui, server = server)
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
#create table for WT/MUTANT
# ins_pep_table <- eventReactive(input$create_peptable, {
#   #include for loop to indicate that user needs to have minimum 9aa length here
#   pepseq <- (c(input$WT_text_in, input$MUT_text_in))
#   peptab$seq <- pepseq
#   peptab
# })
#########################################################################################################
#reactive
ins_pep_table <- reactive({
pepseq <- (c(input$WT_text_in, input$MUT_text_in))
peptab$seq <- pepseq
peptab
})
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
sel_neo_df[1,9]
neo_seq_df[1,9]
print(neo_seq_df[1,9])
2=2
2+2
neo_seq_df[1,9]
runApp('shinyNAP_topub')
print(paste("Creation of Searchfile for custom NeoAntigen complete.", sep = ""))
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
runApp('shinyNAP_topub')
shiny::runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
library(readr)
read_csv("data/maps/ALK/ALK_map3.txt") -> maptestread
read_csv("~/shinyNAP/data/maps/ALK/ALK_map3.txt") -> maptestread
read_csv("~/shinyNAP/data/maps/ALK/ALK_map3.txt"); problems(x)
read_tsv("~/shinyNAP/data/maps/ALK/ALK_map3.txt", sep = "\t"); problems(x)
read_delim("~/shinyNAP/data/maps/ALK/ALK_map3.txt", sep = "\t"); problems(x)
read_delim("~/shinyNAP/data/maps/ALK/ALK_map3.txt", delim = "\t"); problems(x)
read_delim("~/shinyNAP/data/maps/ALK/ALK_map3.txt", delim = "\t") ->maptestread
View(maptestread)
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
runApp('shinyNAP')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(neolibtab)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(neolibtab)
View(neolibtab)
runApp()
runApp()
runApp()
runApp()
View(neolibtab)
runApp()
View(neolibtab)
runApp()
View(neolibtab)
View(neolibtab)
colnames(neolibtab[9:26])[1]
colnames(neolibtab)[9:26]
colnames(neo_seq_df)[9:26]
ncol(neo_seq_df)[9:26]
runApp()
View(neolibtab)
neolibtab[,2:3]
runApp()
runApp()
runApp()
View(neolibtab)
runApp()
View(neolibtab)
View(seqsubset)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
neo_seq_df %>% filter(gene == "KRAS") %>% filter(substitution == "G12A") -> testdf
View(testdf)
testsubset <- testdf[,9:26]
View(testdf)
runApp()
testsubset <- testdf[1,9:26]
View(testsubset)
testsubset[1]
testsubset[1,]
library(tidyr)
gather(testsubset)
gather(testsubset)[,2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/NeoAntigenPortal/functions.R', echo=TRUE)
runApp()
rownames(gentab)
row.names(gentab)
View(gene_seq_df)
View(hla)
View(neolibtab)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
